#+title: Revisi√≥n de la tarea 1
#+options toc:nil num:nil

* Criterios de calificaci√≥n

- Documentaci√≥n :: 2 puntos
- Programa funcional :: 2 puntos
- Aplicaci√≥n de los principios vistos en clase :: 6 puntos

* Revisi√≥n

** Sergio Alvarez
- Problema elegido :: De gatos y ratones
- Documentaci√≥n :: [[./AlvarezSergio/tarea1Readme.txt][tarea1Readme.txt]]
- C√≥digo :: [[./AlvarezSergio/tarea1.py][tarea1.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Muy bien documentado! Documentar cr√≠ticamente lo que /no/
    lograste implementar es una gran se√±al de honestidad üòâ
  - Las que eliges implementar son correctas; el uso de un apagador
    implementa al /acuerdo de caballeros/. ¬°Ojo! En el planteamiento
    de mi problema en ning√∫n lugar te obliga a que puedan entrar gatos
    y ratones al mismo tiempo ‚Äî S√≥lo te obliga a que los unos se coman
    a los otros /si se presenta la necesidad/.
    - Faltar√≠a sin embargo, aunque fuera a forma de formalismo, que el
      gato busque e /intente comer/ a un rat√≥n, a√∫n a sabiendas de que
      no va a encontrar ninguno (tu funci√≥n =gato()= no implementa esa
      l√≥gica).
  - Pensando que tal vez los gatos no se com√≠an a los ratones por lo
    r√°pido que era el proceso en =comer()= (s√≥lo
    =platos[temp].acquire()=, =print()= y =platos[temp].release()=),
    le agregu√© una demora:
    #+begin_src diff
      @@ -1,5 +1,6 @@
       import threading
       from random import randrange
      +from time import sleep
 
       l = 3
       k = 5
      @@ -46,6 +47,8 @@ def comer(tipo, id):
	   temp = randrange(m)
	   platos[temp].acquire()
	   print("Soy ",tipo," numero ",id," como de plato ",temp)
      +    sleep(0.1)
      +    print("%s n√∫mero %d libera el plato %d" % (tipo, id, temp))
	   platos[temp].release()
 
       def raton(id):
    #+end_src
    ¬°Esto me hizo ver que la ejecuci√≥n era incorrecta!
    #+begin_src text
      Soy  raton  numero  0  como de plato  3
      Soy  gato  numero  4  como de plato  1
      Soy  raton  numero  1  como de plato  0
      gato n√∫mero 2 libera el plato 2
      raton n√∫mero 0 libera el plato 3
      raton n√∫mero 1 libera el plato 0
      gato n√∫mero 4 libera el plato 1
    #+end_src
    El problema resulta ser sencillo: Cuando implementamos los
    [[http://sistop.org/codigo/lect_escr_v1_py.html][lectores y escritores]], el lector tiene la misma l√≥gica que la que
    implementaste ‚Äî ¬°Pero el escritor incondicionalmente tiene que
    adquirir el apagador, us√°ndolo como mutex! En este caso, como
    ambos "prenden" y "apagan" el apagado s√≥lo de forma condicional
    (cuando hay cero de su propia categor√≠a adentro), est√°n
    compartiendo el apagador.

    Creo que una soluci√≥n ser√≠a tener /dos/ apagadores: En vez de s√≥lo
    =cocina=, tendr√≠amos =cocina_g= y =cocina_rs=. Los ratones usar√≠an
    como mutex incondicional a =cocina_g= y compartir√≠an =cocina_r=,
    en tanto que los gatos usar√≠an como mutex incondicional a
    =cocina_r= y compartir√≠an =cocina_g=.
- Calificaci√≥n :: 8

** Benjam√≠n Anguiano y  Omar Mart√≠n
- Problema elegido :: De gatos y ratones
- Documentaci√≥n :: [[./AnguianoMoralesBenjamin-MartinMancillaAngelOmar/README.txt][README.txt]]
- C√≥digo :: [[./AnguianoMoralesBenjamin-MartinMancillaAngelOmar/TareaSO/Manejador.java][Manejador.java]]
- Lenguaje :: Java
- Comentarios ::
  - Como les coment√© en el /pull request/, Git es para entregar los
    fuentes directamente. Me entregaron un archivo =.zip= que
    descomprim√≠... Y este conten√≠a al c√≥digo fuente, pero tambi√©n a
    los archivos compilados (=*.class=) e incluso a la documentaci√≥n
    autogenerada (=Documentacion/*=). ¬°Hubiera sido mejor que s√≥lo
    entregaran =Manejador.java=!
  - La documentaci√≥n no responde a los puntos que ped√≠ que
    desarrollaran, √∫nicamente menciona el problema que encontraron al
    realizar su implementaci√≥n
  - El √∫nico mecanismo de sincronizaci√≥n que implementaron un
    multiplex: Al inicializar a =Plato= (que es un =Semaphore=) con un
    3, indican que s√≥lo pueden comer tres animales al mismo tiempo ‚Äî
    Pero no controla de ninguna manera qu√© animales tienen o no acceso
  - La l√≥gica que deber√≠an resolver empleando sincronizaci√≥n la
    serializan y explicitan con programaci√≥n secuencial en el m√©todo
    =run()= de =GeneradorAnimales()= ‚òπ
- Calificaci√≥n :: 6

** Emanuel Flores y Andrea Garc√≠a
- Problema elegido :: De gatos y ratones
- Documentaci√≥n :: [[./FloresEmanuel-Garc√≠aAndrea/README.md][README.md]]
- C√≥digo :: [[./FloresEmanuel-Garc√≠aAndrea/gato_raton.py][gato_raton.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Interesante implementaci√≥n! (¬°y correcta, adem√°s!)
  - Me gusta que hayan trasladado al /rat√≥n/ la responsabilidad de
    verificar si hay gatos, en cuyo caso se suicida üòâ
- Calificaci√≥n :: 10

** Sa√∫l Gabino y Ricardo Mu√±oz
- Problema elegido :: De gatos y ratones
- Documentaci√≥n :: No entregada
- C√≥digo :: [[./Mu%C3%B1ozRicardo-GabinoSaul/Comida_de_Gatos/comidagatos.py][comidagatos.py]]
- Lenguaje :: Python
- Comentarios ::
  - Una implementaci√≥n curiosa, con /tres/ tipos de hilo: Ratones,
    gatos, y... ¬°platos!
  - La implementaci√≥n sirve eternamente sobre el mismo √∫nico plato, y
    entran repetidamente el mismo gato y el mismo rat√≥n a comer de √©l
    (hay tres hilos concurrentes, pero s√≥lo uno de cada tipo)
  - ¬øMecanismos de sincronizaci√≥n? Veo a =hay_platos()= como una
    se√±alizaci√≥n que se emite al llenar los platos, misma que pueden
    cachar tanto gatos como ratones. Adem√°s de √©sta, s√≥lo est√°n
    =mutex= y =mutex2=, que se usan como mutexes protegiendo... ¬ø
    =Platos= y =comiendo=?
  - ¬øNo implementa ninguna condici√≥n en que se puedan encontrar
    ratones y gatos? No puedo decir que el problema planteado est√©
    resuelto.
- Calificaci√≥n :: 6

** Andr√©s Gonz√°lez
- Problema elegido :: El asesor y los alumnos
- Documentaci√≥n :: [[./Gonz√°lezAndr√©s/README.md][README.md]]
- C√≥digo :: [[./Gonz√°lezAndr√©s/main.py][main.py]], [[./Gonz√°lezAndr√©s/cubiculo.py][cubiculo.py]], [[./Gonz√°lezAndr√©s/__init__.py][__init__.py]]
- Lenguaje :: Python
- Comentarios ::
  - Muy buena implementaci√≥n. ¬°Y gracias por presentarme al m√≥dulo
    =Faker=! Seguro lo utilizar√© en el futuro.
  - Falta considerar un punto del planteamiento: El profesor /debe
    poder dormirse/ cuando no haya ning√∫n alumno. As√≠ como lo tenemos,
    el pobre va a estar aburrido sentado al escritorio cuando termine
    de atender a los alumnos. En un caso extremo:
    #+begin_src text

      $ python3 main.py -s 3 -a 0

      ---- Proceso iniciado con PID 7952 ----

      Iniciando al profesor...
      Iniciando 0 alumnos...
      Hola, soy Travis Kane e iniciar√© a responder dudas...
	      El profesor est√° esperando una pregunta...
    #+end_src
    Probablemente podr√≠as resolverlo con una l√≥gica similar a la del
    apagador; si el profesor determina primero si =alumnos_dentro > 0=
    y, dependiendo de eso, atiende a la siguiente pregunta o se va a
    dormir. Claro, los alumnos tendr√≠an que estar atento a esa
    condici√≥n... ¬øTal vez poner una =puerta()= que tuvieran que tocar
    antes de entrar?
  - Muy bueno que el programa sea parametrizable desde la l√≠nea de
    comando.
- Calificaci√≥n :: 10

** Jos√© Gonzalez y Alejandro Peralta
- Problema elegido :: De gatos y ratones
- Documentaci√≥n :: No entregada
- C√≥digo :: [[./GonzalezPastor-PeraltaEspinosa/tarea.pdf][tarea.pdf]],  [[./GonzalezPastor-PeraltaEspinosa/tarea_so.pdf][tarea_so.pdf]] (archivos id√©nticos)
- Lenguaje :: Java
- Comentarios ::
  - La entrega es un PDF con texto/c√≥digo en Java. No puedo intentar
    compilarlo ni modificarlo (para intentar mejorar los puntos en que
    se hayan equivocad) f√°cilmente ‚òπ
  - Extraje el texto del PDF, pero el compilador de Java me indica que
    hay errores, desde el hecho de que hay m√∫ltiples clases p√∫blicas
    en un s√≥lo archivo.
  - No alcanzo a seguirle la l√≥gica a lo que presentaron.
- Calificaci√≥n :: 5

** Alam Guill√©n
- Problema elegido :: El asesor y los alumnos
- Documentaci√≥n :: [[./GuillenAlam/Readme.txt][Readme.txt]]
- C√≥digo :: [[./GuillenAlam/Asesor_alumnos.py][Asesor_alumnos.py]]
- Lenguaje :: Python
- Comentarios ::
  - Cuesti√≥n estil√≠stica: Usas mucho el siguiente estilo de
    comentario:
    #+begin_src python
      def Asesor(): #Definimos al asesor
	  global alumnos
	  print ("El asesor duerme") #Menasje que indica que el asesor duerme
	  while(alumnos < alumnosMaximos):
	      semaphoreAsesor.acquire() #El asesor despierta
	      if(alumnos != 0):
		  print ("El asesor despierta") #Menasje que indica que el asesor  esta despierto
    #+end_src
    Resulta mucho m√°s claro que los comentarios vayan en l√≠neas
    independientes (t√≠picamente /antecediendo/ a la instrucci√≥n que
    describen. Pero, m√°s a√∫n, un comentario tiene que ser √∫til,
    explicar lo que no resulta obvio. Por ejemplo, tus comentarios
    =Mensaje que indica que el asesor duerme= y =Mensaje que indica
    que el asesor est√° despierto= no dan informaci√≥n adicional (y
    hasta dir√≠a que tampoco =Definimos al asesor=). Yo dejar√≠a este
    fragmento √∫nicamente como:
    #+begin_src python
      def Asesor():
	  global alumnos
	  print ("El asesor duerme")
	  while(alumnos < alumnosMaximos):
	      # El asesor despierta
	      semaphoreAsesor.acquire()
	      if(alumnos != 0):
		  print ("El asesor despierta")
    #+end_src
  - Respondiendo a la duda que planteas en tu documentaci√≥n: Me parece
    que el problema aparece porque el asesor duerme /cuando no tiene
    dudas que responder/, aunque haya alumnos en la oficina. Si mueves
    tu =print("El asesor duerme")= hacia adentro del =while=, puedes
    ver que el asesor se despierta cada vez que entra un alumno ‚Äî
    ¬°Pero responde a las preguntas mientras duerme!
    #+begin_src text
      $ python3 Asesor_alumnos.py 
      El asesor duerme
      Alumno 0 esperando
      Alumno 0 preguntando...
      El asesor despierta
      El asesor duerme
      Alumno 1 esperando
      El asesor despierta
      El asesor duerme
      Alumno 2 esperando
      El asesor despierta
      El asesor duerme
      Alumno 3 esperando
      El asesor despierta
      El asesor duerme
      Alumno 4 esperando
      El asesor despierta
      El asesor duerme
      El profesor esta respondiendo la pregunta 1 del alumno 0
      Alumno 0 preguntando...
      El profesor esta respondiendo la pregunta 2 del alumno 0
    #+end_src
  - Usar un torniquete por s√≠ solo como lo haces no tiene mucho
    sentido. El torniquete es utilizado sobre todo /en conjunto/ con
    otras construcciones, para crear barreras o sem√°foros. Casi casi
    ¬°lo √∫nico que le falta a tu implementaci√≥n es convetir ese mutex
    en un apagador!
- Calificaci√≥n :: 8

** Luis L√≥pez
- Problema elegido :: El cruce del r√≠o
- Documentaci√≥n :: [[./LopezLuis/Tarea1.txt][Tarea1.txt]]
- C√≥digo :: [[./LopezLuis/Tarea1.java][Tarea1.java]]
- Lenguaje :: Java
- Comentarios ::
  - Tu c√≥digo no puede ser compilado: Lo entregas como =Tarea1.java=,
    pero implementas la clase =New=. Seg√∫n lo requiere Java, deber√≠a
    ser en el archivo =New.java=. Bueno, lo renombro ‚Äî Tampoco
    funciona. Usas una funci√≥n no definida, =Man=:
    #+begin_src text
      $ javac New.java 
      New.java:79: error: cannot find symbol
		       int numero = Man.generaNumeroAleatorio(0, 1) ;
				    ^
	symbol:   variable Man
	location: class New
      1 error
    #+end_src
  - Te respondo lo mismo de los comentarios que lo que le indiqu√© a
    Alam Guill√©n: Es muy dif√≠cil leer los comentarios as√≠. Adem√°s,
    comentas de m√°s (comentas cosas obvias ante la lectura del
    fuente), lo cual hace m√°s dif√≠cil la comprensi√≥n.
  - Veo que intentaste resolver con construcciones propias de Java,
    como =CyclicBarrier=. ¬°Bien!
  - Al hacer la verificaci√≥n de balance de las balsas tan tarde (con
    los interesados ya a bordo), los est√°s /condenando/ a perderse el
    congreso entero: Pasar el resto de la eternidad dormidos en sus
    botes. Cierto, no se van a pelear... pero van a perderse de la
    diversi√≥n ‚òπ
    #+begin_src java
      if((Hackers==3 && Serfs==1) ||(Serfs==3 && Hackers==1)) {
	  System.out.println("Espera tu turno");
      //	System.out.println("Dormido");
	  Sleep.acquire();
      //	System.out.println("Despierto");
	  band=true;
      }else {
    #+end_src
    - Aunque... Tengo que reconocerlo ‚Äî Es una soluci√≥n
      ingeniosa. Pero lleva a una inanici√≥n tremenda.
- Calificaci√≥n :: 7

** Ulysses L√≥pez
- Problema elegido :: El cruce del r√≠o
- Documentaci√≥n :: [[./LopezUlysses/informe.txt][informe.txt]]
- C√≥digo :: [[./LopezUlysses/hackerandserf.py][hackerandserf.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Ups! El c√≥digo falta a su promesa, y en mi primera ejecuci√≥n tuve
    a unos cuantos programadores mojados:
    #+begin_src text
      $ python3 hackerandserf.py 
      ¬øCu√°ntas iteraciones requiere?
      5
      Se est√° subiendo un  Serf de Microsoft a la balsa
      Se est√° subiendo un  Serf de Microsoft a la balsa
      Se est√° subiendo un  Hacker de Linux a la balsa
      Se est√° subiendo un  Serf de Microsoft a la balsa
      Ya somos 4 personas en la balsa
      ,**********************************Vamos a zarpar y no habr√°n problemas...creo...************************************
      Se est√° subiendo un  Hacker de Linux a la balsa
      Se est√° subiendo un  Serf de Microsoft a la balsa
      Se est√° subiendo un  Hacker de Linux a la balsa
      Se est√° subiendo un  Hacker de Linux a la balsa
      Ya somos 4 personas en la balsa
    #+end_src
  - Tuve que rascarme un poco la cabeza. La resoluci√≥n que presentas
    es correcta... ¬øPor qu√© pasa esto una y otra vez? ¬°Porque liberas
    =mutex= antes de haber realizado la acci√≥n!
    - Esto es correcto en la tercera condici√≥n de =hacker()= y de
      =serf()=, porque la acci√≥n es simplemente pararse en la fila
      correspondiente (no hay cuatro personas a√∫n). Pero en ambas
      funciones, sea que =numberhackers == 4=, =numberserfs == 4=, o
      ambos sean =2=, primero liberas =mutex= y luego llamas a
      =up(person)=. Me parece que por ah√≠ das la oportunidad de que se
      /cuele/ uno que no corresponde, abriendo una peque√±a condici√≥n
      de carrera.
  - No encontr√© ning√∫n caso en que el proceso se detuviera, no se a
    qu√© pueda deberse que t√∫ lo viste.
  - La implementaci√≥n, pese a este /bug/, es buena.
- Calificaci√≥n: 8

** C√©sar Lugo
- Problema elegido :: Santa Claus
- Documentaci√≥n :: [[./LugoCesar/LugoCesar.txt][LugoCesar.txt]]
- C√≥digo :: [[./LugoCesar/LugoCesar.py][LugoCesar.py]]
- Lenguaje :: Python
- Comentarios ::
  - El c√≥digo no es Python v√°lido ‚òπ
    - En Python no existe =variable++=, necesariamente tienes que
      escribir =variable = variable + 1= o =variable +=¬†1=
    - El c√≥digo no est√° indentado correctamente
    - Hay varias funciones no definidas. Particularmente, =signal()= y
      =wait()=. ¬øQu√© intentaste implementar?
  - Incluso una vez corregido el texto, tu programa no hace nada
    - Defines funciones, pero no las mandas llamar en ning√∫n momento
- Calificaci√≥n :: 5

** C√©sar Martinez y Lisset Noriega
- Problema elegido :: De gatos y ratones
- Documentaci√≥n :: [[./MartinezCesar-NoriegaLisset/Especificaciones.txt][Especificaciones.txt]]
- C√≥digo :: [[./MartinezCesar-NoriegaLisset/gatos_ratones.py][gatos_ratones.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Muy bien documentado! Corto y al grano, refiri√©ndose a todos los
    puntos solicitados, y como una buena gu√≠a para comprender el c√≥digo.
  - La implementaci√≥n es correcta, y est√° bien justificado c√≥mo usan
    las construcciones de sincronizaci√≥n
  - Como comentario de estilo y seguridad: Me llam√≥ l atenci√≥n que en
    todas las funciones declaran (¬øpor si acaso?) a todas las
    variables globales, las usen o no. Esto es considerado una /mala
    pr√°ctica/ de programaci√≥n (y no espec√≠ficamente de Python) ‚Äî ¬°Hay
    que aprender a limitar el /reguero/ de nuestras variables!
- Calificaci√≥n :: 10

** Nestor Martinez
- Problema elegido :: Santa Claus
- Documentaci√≥n :: [[./MartinezNestor/MartinezOstoa_tarea1.md][MartinezOstoa_tarea1.md]]
- C√≥digo :: [[./MartinezNestor/northPole.py][northPole.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Buena implementaci√≥n!
  - Comentas en los lugares adecuados para explicar la intenci√≥n de tu
    c√≥digo. ¬°Bien!
  - me llaman la atenci√≥n algunas construcciones, sobre todo las
    relacionadas con la generaci√≥n de aleatorios para jugar con
    probabilidades.
    - Por ejemplo, l√≠nea 56: =if randint(0,500) <=250= es exactamente
      equivalente a =if random() <=0.5=
    - L√≠nea 78, =if randint(20,40 <=30= es exactamente lo mismo que
      =if randint(0,20) <=10= ‚Äî O a =if random() <=0.5=
    Son usos correctos. Pero considerando que podr√≠as estar
    escribiendo un programa m√°s complejo, y podr√≠a ser le√≠do por gente
    que no te conoce, conviene siempre usar las construcciones m√°s
    sencillas ‚Äî Alguien podr√≠a pasar un rato buscando en el c√≥digo
    /¬øpor qu√© 500?/, /¬øpor qu√© de 20 a 40?/...
- Calificaci√≥n :: 10

** Luis Mata
- Problema elegido :: El asesor y los alumnos
- Documentaci√≥n :: [[./MataLuis/documentacion.txt][documentacion.txt]]
- C√≥digo :: [[./MataLuis/tarea1.py][tarea1.py]]
- Lenguaje :: Python
- Comentarios ::
  - El programa se acerca a lo solicitado, pero no lo resuelve del todo
  - Los hilos =alumno= se limitan a agregar sus preguntas al arreglo
    global =preguntas= y al =contador=, pero salen casi de inmediato
  - La funci√≥n =responderPregunta()= del =profesor= se manda a s√≠
    mismo la se√±al de =tomarPalabra=, pero perfectamente podr√≠amos
    omitir esa se√±alizaci√≥n ‚Äî No cambiar√≠a la
    ejecuci√≥n. =responderPregunta()= dice:
    #+begin_src python
      def responderPregunta():
	  global alumnos, preguntas
	  if (len(alumnos)>0):
	      numAlumno = alumnos[0]
	      tomarPalabra.acquire()  ##Nos permite que solo un alumno pregunte al mismo tiempo, tome la palabra. 
	      print (".........................Falta atender a estos alumnos:")
	      print '.........................', alumnos
	      print("Alumno %d: Mi  duda es:...." %numAlumno)
	      print("Profesor: Mira, eso es muy sencillo....")
	      # (...)
    #+end_src
    Cuando en realidad esto deber√≠a reflejar el intercambio de flujo
    entre dos funciones, una que "hablara" por el profesor y la otra
    por el alumno.
- Calificaci√≥n :: 6

** Max Serrano
- Problema elegido :: De gatos y ratones
- Documentaci√≥n :: [[./MaxSerrano/MaxSerrano.txt][MaxSerrano.txt]]
- C√≥digo :: [[./MaxSerrano/pgyr.py][pgyr.py]]
- Lenguaje :: Python
- Comentarios ::
  - Tu programa implementa tres hilos ‚Äî Un gato, un rat√≥n, un
    plato. Nunca hay m√°s de un animal de cada tipo "existente" al
    mismo tiempo.
  - No implementas consideraci√≥n hacia el caso de que un gato y un
    rat√≥n se encuentren. ¬°La l√≥gica de =gato()= es id√©ntica a la de
    =raton()=!
- Calificaci√≥n :: 7

** Luis Moreno y √Ångel Ramirez
- Problema elegido :: El asesor y los alumnos
- Documentaci√≥n :: [[./MorenoLuis-RamirezAngel/Tarea1SistOp.pdf][Tarea1SistOp.pdf]]
- C√≥digo :: [[./MorenoLuis-RamirezAngel/Tarea1SistOpMC.cpp][Tarea1SistOpMC.cpp]]
- Lenguaje :: C++
- Comentarios ::
  - El c√≥digo es bastante decentemente portable, basta reemplazar
    =windows.h= por =unistd.h= y modificar las llamadas a =Sleep(n)=
    (con =n= en microsegundos) por =sleep(n)= (con =n= en segundos).
  - ¬°UGH! ¬øQui√©n les ense√±√≥ a escribir cadenas en espa√±ol en C++
    usando interpolaci√≥n de caracteres ASCII? ¬°M√°ndenlo de vuelta a
    los ochenta! Les dejo como referencia otro texto (nada
    nuevo... Este tamb√≠√©n es de 2003) de Joel Spolsky al respecto: [[https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/][The
    Absolute Minimum Every Software Developer Absolutely, Positively
    Must Know About Unicode and Character Sets (No Excuses!)]]
    - Ojo, si quieren exponer acerca de Unicode... Lo declaro un tema
      absolutamente v√°lido üòâ
  - Implementan su soluci√≥n usando C++, y empleando variables de
    condici√≥n. ¬°Muy bien! ¬°Gente valiente y curiosa! ‚ò∫
  - En la implementaci√≥n que hacen, el asesor no existe ‚Äî
    literalmente. Los alumnos llegan, se sientan, hacen sus preguntas
    y se van, pero no existe ning√∫n objeto que represente al
    asesor. ¬°El meollo del programa es que el asesor de rato en rato
    se encuentre con sus sillas vac√≠as y pueda acostarse a dormir la
    siesta!
  - El programa utiliza espera activa y es vulnerable a una condici√≥n
    de carrera. Para demostrarlo, c√≥rranlo con una √∫nica silla, y
    ver√°n que tarde o temprano:
    #+begin_src text
      (...)
      Hola, soy 10 y tengo 1 preguntas =D
      ¬± 1 hizo una pregunta
      ¬± 1 hizo una pregunta
      √µ 1 sali¬¢ del sal¬¢n 

      Se acabo =D

      Presiona ENTER para continuar...¬Ø 2 entr¬¢ al sal¬¢n 
      ¬± 2 hizo una pregunta
      √µ 2 sali¬¢ del sal¬¢n 
      (...)
    #+end_src
- Calificaci√≥n :: 7

** Jorge Ramos y Brian Espinoza
- Problema elegido :: Cruce de caminos
- Documentaci√≥n :: [[./RamosJorge-EspinozaBrian/readme.md][readme.md]]
- C√≥digo :: [[./RamosJorge-EspinozaBrian/problema2.py][problema2.py]]
- Lenguaje :: Python
- Comentarios ::
  - _Excelente_ documentaci√≥n. Hay algunos detalles de formateo con
    Markdown que podr√≠an mejorarse, pero la documentaci√≥n es sin duda
    la m√°s completa de las que he visto hasta ahora.
  - Soluci√≥n original y completa. Tal vez un poquito /barroca/, pero
    muy buena.
  - Me queda la duda ‚Äî Es posible que, como el avance de cada coche se
    da secci√≥n por secci√≥n, este c√≥digo sea vulnerable a caer en
    bloqueo mutuo. Lo corr√≠ varias veces y no ocurri√≥, pero eso no
    /garantiza/ que no pueda ocurrir
    - Tal vez esta situaci√≥n la salve el uso de "sem√°foros viales" que
      no eran parte del planteamiento original... ¬ø?
    - O... ¬°Ah, no! No es vulnerable. El que el ciclo de cruces est√©
      protegido con un mutex hace que s√≥lo un auto est√© cruzando a la
      vez. Tal vez es un poco sub√≥ptimo (no permite que haya
      concurrencia permitida no-rival), pero evita problemas
    - ¬øSe les ocurre alguna manera en que /sin peligro de bloqueo
      mutuo/ pueda quitarse el mutex global? (s√≠, s√≠ la hay)
- Calificaci√≥n :: 10

** Cristian Romero
- Problema elegido :: Los alumnos y el asesor
- Documentaci√≥n :: [[./RomeroAndradeCristian/README.md][README.md]], [[./RomeroAndradeCristian/Documentacion.html][Documentacion.html]]
- C√≥digo :: [[./RomeroAndradeCristian/main.py][main.py]], [[./RomeroAndradeCristian/alumnos_asesor/Alumnos.py][Alumnos.py]], [[./RomeroAndradeCristian/alumnos_asesor/Cubiculo.py][Cubiculo.py]], [[./RomeroAndradeCristian/alumnos_asesor/__init__.py][__init__.py]], [[./RomeroAndradeCristian/alumnos_asesor/Profesor.py][Profesor.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Muy bien! Me parece que modelaste correctamente todos los
    requisitos de este problema, incluyendo la parte m√°s complicada
    (que el profesor se duerma cuando puede hacerlo).
    - Ser√≠a bueno que, en vez de dormirse "falsamente" (con un
      =sleep(1)=), tuvieras algo como:
      #+begin_src python
      if puede:
          print('Zzzzzzzzzzzzzzzzzzzz...')
	  cubiculo.cierra_puerta()
	  profe_dormido.acquire()
	  print('despert√©')
      #+end_src python
      Para esto, tendr√≠as que implementar un =cubiculo.cierra_puerta()= que
      determinara alguna condici√≥n del =Cubiculo= que un =Alumno=
      pudiera verificar condicionalmente, y =cubiculo.tocar_puerta()=
      ‚Äî Lo cual despertar√≠a al profesor mediante un
      =profe_dormido.release()=... Pero para eso tendr√≠as que hacer
      algunas modificaciones a la arquitectura general ;-)
  - Excelente documentaci√≥n.
  - Muy bienvenido que le pongas algo de humor a la implementaci√≥n ;-)
    S√≥lo me resta quejarme de algo: ¬øPor qu√© duplicar la lista de
    preguntas entre alumnos y profesor? ;-)
- Calificaci√≥n :: 10

** Ricardo Rosales
- Problema elegido :: El servidor Web
- Documentaci√≥n :: [[./RosalesRicardo/tarea1.pdf][tarea1.pdf]], [[./RosalesRicardo/tarea1.tex][tarea1.tex]]
- C√≥digo :: [[./RosalesRicardo/jefe-trabajador.py][jefe-trabajador.py]]
- Lenguaje :: Python
- Comentarios ::
  - El planteamiento era un poco al rev√©s ‚Äî Era considerando que t√∫
    est√°s implementando el /servidor/ Web, no un navegador
    - Esto responde al punto que mencionas como √∫ltimo p√°rrafo de tu
      documentaci√≥n
  - Los trabajadores que generaste (clase =Trabajor=) no son hilos
    independientes que quedan /dormidos/ esperando alg√∫n evento, sino
    que √∫nicamente imprimen los resultados de forma secuencia / lineal
  - El √∫nico uso de mecanismos de sincronizaci√≥n que hiciste fue para
    un mutex =m= (que, adem√°s, resulta innecesario ‚òπ)
- Calificaci√≥n :: 6

** Erik Sanabria
- Problema elegido :: De gatos y ratones
- Documentaci√≥n :: [[./SanabriaErik/Readme.md][Readme.md]]
- C√≥digo :: [[./SanabriaErik/source.c][source.c]], [[./SanabriaErik/Makefile][Makefile]]
- Lenguaje :: C
- Comentarios ::
  - Punto a favor: Te atreviste a desarrollar la soluci√≥n en C, que
    (para el tipo de problemas que estamos resolviendo) es
    necesariamente m√°s complejo
    - Y el uso de OOP en C, as√≠ sea apenas un atisbo... Es muy poco
      frecuente observarlo por aqu√≠. ¬°Bonito!
  - Punto en contra: Te falt√≥ implementar buena parte de la l√≥gica ‚òπ
    Lanzas los hilos, pero √©stos no se comunican entre s√≠
  - Desafortunadamente, no puedo decir que el problema est√© resuelto ‚òπ
  - Respecto a la documentaci√≥n: ¬øHay alguna raz√≥n para /requerir/ un
    sistema Linux >= 3.10, gcc >= 5.4 o procesador de 64 bits? No creo
    que las versiones que presentas sean las del entorno que t√∫
    empleas (porque son demasiado viejas). Pero eso no necesariamente
    las hace requisito (sino que "probado en...")
- Calificaci√≥n :: 7
